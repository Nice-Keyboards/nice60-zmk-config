#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/reset.h>
#include <dt-bindings/zmk/ext_power.h>

// #define COMBO(NAME, BINDINGS, KEYPOS, TIMEOUT, REQIDLE, SLOWREL, LAYERS) \
//   combo_##NAME { \
//     bindings = <BINDINGS>; \
//     key-positions = <KEYPOS>; \
// 	timeout-ms = <TIMEOUT>; \
//     require-prior-idle-ms = <REQIDLE>; \
// 	SLOWREL; \
// 	layers = <LAYERS>; \
//   };

// #define COMBO(NAME, BINDINGS, KEYPOS) \
// 	combo_##NAME { \
// 		timeout-ms = <50>; \
// 		bindings = <BINDINGS>; \
// 		key-positions = <KEYPOS>; \
// 		layers = <0>; \
// 	};

#define COMBO(NAME, LAYERS, KEYPOS, BINDINGS, TIMEOUT, REQIDLE) \
	combo_##NAME { \
		layers = <LAYERS>; \
		key-positions = <KEYPOS>; \
		bindings = <BINDINGS>; \
		timeout-ms = <TIMEOUT>; \
		require-prior-idle-ms = <REQIDLE>; \
	};

/ {
	// https://zmk.dev/docs/features/combos
    combos {
        compatible = "zmk,combos";

		// REQIDLE does not apply when in disable_layer
		COMBO(disable, 0 2, 0 60, &tog 2, 50, 2000)

		// https://zmk.dev/docs/config/combos#devicetree
		// COMBO(disable, &tog 2, 0 60, 50, -1, /slow-release/, 2)
    };

	keymap {
		compatible = "zmk,keymap";
		
		default_layer {
// ------------------------------------------------------------------------------------------
// | ESC |  1  |  2  |  3  |  4  |  5  |  6  |  7  |  8  |  9  |  0  |  -  |  =  |   BKSP   |
// | TAB  |  Q  |  W  |  E  |  R  |  T  |  Y  |  U  |  I  |  O  |  P  |  [  |  ]  |   "|"   |
// | CAPS  |  A  |  S  |  D  |  F  |  G  |  H  |  J  |  K  |  L  |  ;  |  '  |     ENTER    |
// |  SHIFT  |  Z  |  X  |  C  |  V  |  B  |  N  |  M  |  ,  |  .  |  /  |      SHIFT       |
// |  CTL  |  WIN  |  ALT  |            SPACE              |  ALT  |  WIN  |  CTL |  MO(1)  |
// ------------------------------------------------------------------------------------------
			bindings = <
	&gresc  &kp N1 &kp N2 &kp N3 &kp N4 &kp N5 &kp N6 &kp N7 &kp N8 &kp N9 &kp N0 &kp MINUS &kp EQUAL  &kp BSPC
	&kp TAB  &kp Q  &kp W  &kp E  &kp R  &kp T  &kp Y  &kp U  &kp I  &kp O  &kp P  &kp LBKT  &kp RBKT  &kp BSLH
	&kp CLCK  &kp A  &kp S  &kp D  &kp F  &kp G  &kp H  &kp J  &kp K  &kp L  &kp SEMI &kp SQT           &kp RET
	&kp LSHFT   &kp Z  &kp X  &kp C  &kp V  &kp B  &kp N  &kp M  &kp COMMA &kp DOT &kp FSLH           &kp RSHFT
	&kp LCTRL &kp LGUI &kp LALT             &kp SPACE                     &kp RALT  &kp RGUI  &kp RCTRL   &mo 1
			>;
		};

		rgb_layer {
// ------------------------------------------------------------------------------------------------
// | BT CLR | F1  | F2  | F3  | F4  | F5  | F6  | F7  | F8  | F9  | F10  | F11 | F12 |    TOG(2)  |
// |  BT 1   |   |  UP |   | HUEUP | SATUP | BRIUP | SPDUP |   |     |    |     |     | EFFECT REV|
// |   BT 2   | LT |  DN  | RT | HUEDN | SATDN | BRIDN | SPDDN |   |     |   |     |  EFFECT FORW |
// |    BT 3     |     |      |      |     |     |     |     |     |     |     |                  |
// |   BT 4  |      |      |             TOG RGB                | BOOTLOADER | RESET | OUT TOG |  |
// ------------------------------------------------------------------------------------------------
			bindings = <
	&bt BT_CLR   &kp F1    &kp F2    &kp F3  &kp F4           &kp F5          &kp F6          &kp F7          &kp F8   &kp F9   &kp F10  &kp F11 &kp F12  		   &tog 2
	&bt BT_SEL 0  &trans    &kp UP    &trans  &rgb_ug RGB_HUI  &rgb_ug RGB_SAI &rgb_ug RGB_BRI &rgb_ug RGB_SPI  &trans   &trans   &trans   &trans  &trans &rgb_ug RGB_EFR 
	&bt BT_SEL 1   &kp LEFT  &kp DOWN  &kp RIGHT &rgb_ug RGB_HUD &rgb_ug RGB_SAD &rgb_ug RGB_BRD &rgb_ug RGB_SPD &trans   &trans   &trans   &trans        &rgb_ug RGB_EFF
	&bt BT_SEL 2    &trans    &trans    &trans   &trans          &trans          &trans          &trans          &trans   &trans   &trans                          &trans
	&bt BT_SEL 3  &trans   &trans                            &rgb_ug RGB_TOG                                     &bootloader       &sys_reset      &out OUT_TOG    &trans
			>;
		};

		disable_layer {
// ------------------------------------------------------------------------------------------
// |     |     |     |     |     |     |     |     |     |     |     |     |     |          |
// |      |     |     |     |     |     |     |     |     |     |     |     |     |         |
// |       |     |     |     |     |     |     |     |     |     |     |     |              |
// |         |     |     |     |     |     |     |     |     |     |     |                  |
// |       |       |       |                               |       |       |      |         |
// ------------------------------------------------------------------------------------------
			bindings = <
	&none	&none	&none	&none	&none	&none	&none	&none	&none	&none	&none	&none	&none	&none
	&none	&none   &none   &none  	&none  	&none	&none 	&none  	&none   &none   &none   &none  	&none   &none
	&none   &none  	&none  	&none 	&none 	&none 	&none 	&none 	&none   &none   &none   &none        	&none
	&none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none                   &none
	&tog 2 	&none   &none                           &none                           &none	&none	&none   &none
			>;
		};
	};
};